// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  password    String?
  email       String      @unique
  age         Int
  socialAuth  Boolean?
  premiumTime DateTime?
  lastLogin   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  news        News[]
  awards      Award[]
  creditCard  CreditCard?
  roles       Role[]
  Payment     Payment[]
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  argument  String   @db.VarChar(255)
  tags      Tag[]
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  important Boolean
  cover     String   @db.VarChar(255)
  photo1    String   @db.VarChar(255)
  photo2    String   @db.VarChar(255)
  photo3    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String
  news News[]
}

model Award {
  id          Int    @id @default(autoincrement())
  title       String
  year        Int
  description String
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCard {
  id             Int      @id @default(autoincrement())
  cardNumber     String   @db.VarChar(16)
  cardHolderName String
  expirationDate DateTime
  cvv            String   @db.VarChar(3)
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Payment {
  id        Int           @id @default(autoincrement())
  amount    Float
  method    PaymentMethod
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Voucher   Voucher?      @relation(fields: [Voucherid], references: [id])
  Voucherid Int?
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  IN_APP_PURCHASE
  PAYPAL
  VOUCHER
}

model Voucher {
  id              Int       @id @default(autoincrement())
  code            String    @unique
  discountPercent Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  payments        Payment[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

enum Roles {
  ADMIN
  USER
  MODERATOR
  EDITOR
}

model Log {
  id    Int    @id @default(autoincrement())
  name  String
  error String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
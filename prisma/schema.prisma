// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  password    String?
  email       String      @unique
  age         Int
  avatar      String?
  socialAuth  Boolean
  blackList   Boolean     @default(false)
  country     String      @default("Brasil")
  premiumTime DateTime?
  lastLogin   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  news        News[]
  awards      Award[]
  creditCard  CreditCard?
  roles       UserRole[]
  payments    Payment[]
}

model News {
  id         Int      @id @default(autoincrement())
  title      String
  argument   String   @db.Text
  tags       Tag[]
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  important  Boolean
  minReads   Int?
  aiValidate Boolean  @default(false)
  cape       String   @db.Text
  photo1     String?  @db.Text
  photo2     String?  @db.Text
  photo3     String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String
  news News[]
}

model Award {
  id          Int      @id @default(autoincrement())
  title       String
  year        Int
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CreditCard {
  id             Int      @id @default(autoincrement())
  cardNumber     String   @db.VarChar(16)
  cardHolderName String
  expirationDate DateTime
  cvv            String   @db.VarChar(3)
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Payment {
  id        Int           @id @default(autoincrement())
  amount    Float
  method    PaymentMethod
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  status    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  voucher   Voucher?      @relation(fields: [voucherId], references: [id])
  voucherId Int?
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  IN_APP_PURCHASE
  PAYPAL
  VOUCHER
}

// Discount in payments
model Voucher {
  id              Int       @id @default(autoincrement())
  code            String    @unique
  discountPercent Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  payments        Payment[]
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  users       UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Log {
  id        Int      @id @default(autoincrement())
  name      String
  error     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
